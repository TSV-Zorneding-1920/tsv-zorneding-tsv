{"version":3,"sources":["webpack:///./plugins/gatsby-theme-tsv-zorneding/src/components/seo/blog.js","webpack:///./plugins/gatsby-theme-tsv-zorneding/src/templates/blog-post.js","webpack:///./plugins/gatsby-theme-tsv-zorneding/src/layout/blog-post.js"],"names":["Blog","props","type","content","push","renderJsonLdWebPage","fullUrl","this","url","slug","image","src","key","dangerouslyExposeHtml","jsonldtype","schema","author","description","headline","title","wordCount","abstract","dateCreated","date","datePublished","dateModified","publisher","getPublisher","mainEntityOfPage","name","itemListElement","position","Site","propTypes","PropTypes","string","isRequired","number","BlogPostTemplate","contentComponent","tags","featuredimage","PostContent","Content","className","imageInfo","alt","length","offset","count","map","tag","to","kebabCase","pageQuery","BlogPost","data","post","markdownRemark","frontmatter","excerpt","fields","site","siteMetadata","siteUrl","seoimage","childImageSharp","fixed","words","canonical","htmlAst","ComponentContent","date_formatted"],"mappings":"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","file":"component---plugins-gatsby-theme-tsv-zorneding-src-layout-blog-post-js-52df18244d26463afa78.js","sourcesContent":["import React from \"react\";\nimport { JSONLD, Generic } from \"react-structured-data\";\nimport Site from \"./site\";\nimport PropTypes from \"prop-types\";\n\nclass Blog extends Site {\n  type = \"article\";\n\n  constructor(props) {\n    super(props);\n    this.content.push(this.renderJsonLdWebPage());\n  }\n\n  renderJsonLdWebPage() {\n    const fullUrl = `${this.props.url}${this.props.slug}`;\n    const image = this.props.image\n      ? `${this.props.url}${this.props.image.src}`\n      : \"\";\n    return (\n      <div key=\"seo-blog-wrapper\">\n        <JSONLD dangerouslyExposeHtml={true} key={this.type}>\n          <Generic\n            type=\"blogPosting\"\n            jsonldtype=\"BlogPosting\"\n            schema={{\n              author: this.props.author,\n              description: this.props.description,\n              headline: this.props.title,\n              wordCount: this.props.wordCount,\n              abstract: this.props.description,\n              dateCreated: this.props.date,\n              datePublished: this.props.date,\n              dateModified: this.props.date,\n              publisher: this.getPublisher(),\n              mainEntityOfPage: {\n                \"@type\": \"Website\",\n                name: \"TSV Zorneding e.V. 1920\"\n              },\n              image: {\n                \"@type\": \"ImageObject\",\n                url: image\n              },\n              url: fullUrl\n            }}\n          />\n        </JSONLD>\n        <JSONLD key=\"seo-breadcrumb\">\n          <Generic\n            type=\"breadcrumbList\"\n            jsonldtype=\"BreadcrumbList\"\n            schema={{\n              itemListElement: [\n                {\n                  position: 2,\n                  \"@type\": \"ListItem\",\n                  \"@id\": fullUrl,\n                  name: this.props.title\n                }\n              ]\n            }}\n          ></Generic>\n        </JSONLD>\n      </div>\n    );\n  }\n}\n\nBlog.propTypes = {\n  ...Site.propTypes,\n  date: PropTypes.string.isRequired,\n  wordCount: PropTypes.number.isRequired\n};\n\nexport default Blog;\n","import React from \"react\";\nimport { kebabCase } from \"lodash\";\nimport Content from \"../components/content\";\nimport TeaserList from \"../components/teaser-list\";\nimport PreviewCompatibleImage from \"../components/preview-compatible-image\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"gatsby\";\nimport { H1, H2, H4 } from \"../components/globals\";\n\nconst BlogPostTemplate = ({\n  content,\n  contentComponent,\n  tags,\n  title,\n  slug,\n  date,\n  featuredimage,\n  author\n}) => {\n  const PostContent = contentComponent || Content;\n  return (\n    <section>\n      <header className=\"main\">\n        <H1>{title}</H1>\n      </header>\n      <span className=\"image object main\">\n        <PreviewCompatibleImage\n          imageInfo={{\n            image: featuredimage,\n            alt: `featured image thumbnail for post ${title}`\n          }}\n        />\n      </span>\n      <PostContent content={content} />\n      <i>Veröffentlicht am {author ? `${date} von ${author}` : `${date}`}</i>\n      <hr />\n\n      {tags && tags.length ? (\n        <>\n          <H2>Mehr zum Thema</H2>\n          <TeaserList offset={0} count={6} tags={tags} slug={slug} />\n          <hr />\n          <H4>Schlagwörter:</H4>\n          <ul className=\"taglist\">\n            {tags.map(tag => (\n              <li key={tag + `tag`}>\n                <Link to={`/tag/${kebabCase(tag)}/`}>{tag}</Link>\n              </li>\n            ))}\n          </ul>\n        </>\n      ) : null}\n    </section>\n  );\n};\n\nBlogPostTemplate.propTypes = {\n  content: PropTypes.node.isRequired,\n  contentComponent: PropTypes.func,\n  tags: PropTypes.array,\n  title: PropTypes.string.isRequired,\n  slug: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  featuredimage: PropTypes.object,\n  author: PropTypes.string\n};\n\nexport default BlogPostTemplate;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"./layout\";\nimport SEO from \"../components/seo/blog\";\nimport BlogPostTemplate from \"../templates/blog-post\";\nimport { ComponentContent } from \"../components/content\";\n\nconst BlogPost = ({ data }) => {\n  const { markdownRemark: post } = data;\n\n  return (\n    <Layout>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.excerpt}\n        slug={post.fields.slug}\n        url={data.site.siteMetadata.siteUrl}\n        image={\n          post.frontmatter.seoimage &&\n          post.frontmatter.seoimage.childImageSharp.fixed\n        }\n        author={post.frontmatter.author}\n        wordCount={post.wordCount.words}\n        date={post.frontmatter.date}\n        canonical={post.frontmatter.canonical}\n        key=\"seo\"\n      />\n\n      <BlogPostTemplate\n        content={post.htmlAst}\n        contentComponent={ComponentContent}\n        tags={post.frontmatter.tags}\n        title={post.frontmatter.title}\n        slug={post.fields.slug}\n        date={post.frontmatter.date_formatted}\n        featuredimage={post.frontmatter.featuredimage}\n        author={post.frontmatter.author}\n        key=\"blog-template\"\n      />\n    </Layout>\n  );\n};\n\nBlogPost.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.object\n  })\n};\n\nexport default BlogPost;\n\nexport const pageQuery = graphql`\n  query BlogPostByID($id: String!) {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 200)\n      htmlAst\n      fields {\n        slug\n      }\n      wordCount {\n        words\n      }\n      frontmatter {\n        date\n        date_formatted: date(formatString: \"DD. MMMM YYYY\", locale: \"de\")\n        title\n        tags\n        canonical\n        featuredimage {\n          childImageSharp {\n            fluid(\n              maxWidth: 1180\n              quality: 100\n              srcSetBreakpoints: [300, 600, 900, 1180]\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_noBase64\n            }\n          }\n        }\n        author\n        seoimage: featuredimage {\n          childImageSharp {\n            fixed(width: 700, height: 400, quality: 100) {\n              src\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}